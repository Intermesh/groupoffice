<?php

namespace go\modules\community\davclient\model;

class HttpClient extends \go\core\http\Client
{

	//public $baseHeaders;

	public function __construct($uri, $headers)
	{
		$this->baseUri = $uri;
		$this->headers = $headers;
	}

	protected function getHeadersForCurl(): array
	{
		$s =[];
		foreach($this->headers as $key => $value) {
			$s[] = $key.': ' . $value;
		}

		return $s;
	}

	protected function request($path, $data)
	{
		if(preg_match('/^https?:\/\//', $path)) {
			$parts = parse_url($path);
			$this->baseUri = $parts['scheme'].'://'.($parts['host'] ?? '');
			if (!empty($parts['port'])) {
				$this->baseUri .= ':' . $parts['port'];
			}
			$path = $parts['path'];
		}
		return parent::request($path, $data); // TODO: Change the autogenerated stub
	}

	public function statusCode() {
		if(!empty($this->curl))
			return curl_getinfo($this->curl, CURLINFO_HTTP_CODE);
		return null;
	}

	public function PROPFIND($path, $data) {
		return $this
			->setOption(CURLOPT_CUSTOMREQUEST, "PROPFIND")
			->request($path, '<?xml version="1.0"?>'.$data);
	}

	public function REPORT($path, $data) {
		return $this
			->setOption(CURLOPT_CUSTOMREQUEST, "REPORT")
			->request($path,'<?xml version="1.0"?>'.$data);
	}

	public function PUT($path, $data) {
		return $this
			->setOption(CURLOPT_CUSTOMREQUEST, "PUT")
			->request($path, $data);
	}

	public function DELETE($path) {
		return $this
			->setOption(CURLOPT_CUSTOMREQUEST, "DELETE")
			->request($path, '');
	}

	public function parsedMultiStatus() {
		// skip namespace complexity
		$body = $this->body();
		if ($this->statusCode() === 401) {
			throw new \RuntimeException('Dav Authentication failed');
		}
		if ($this->statusCode() === 403) {
			throw new \RuntimeException('Dav Forbidden');
		}
		if (!$body) {
			throw new \OutOfBoundsException('No response for: ' . '[PAYLOAD HERE]');
		}
//		$xml = str_ireplace(['<d:','<cal:','<ical:','<cs:','<card:'], '<', $body);
//		$xml = str_ireplace(['</d:','</cal:','</ical:','</cs:','</ard:'], '</', $xml);
		$cleanXml = preg_replace('/<([\/]?)(\w+:)?(\w+)([^>]*)>/', '<$1$3$4>', $body);
		$multistatus = \simplexml_load_string($cleanXml);
		$result = [];
		foreach ($multistatus->response as $response) {
			list(, $status, ) = explode(' ', $response->propstat->status, 3);
			if ($status == 200) {
				$result[(string) $response->href] = $response->propstat->prop;
			}
		}
		return $result;
	}

//	private function parseXMl($xml) {
//		$multistatus = \simplexml_load_string($xml);
//		$result = [];
//		$namespaces = $multistatus->getNamespaces(true);
//		foreach ($multistatus->response as $response) {
//			list(, $status, ) = explode(' ', $response->propstat->status, 3);
//			if ($status == 200) {
//				$result[(string) $response->href] = $response->propstat->prop;
//			}
//		}
//		iterator_to_array($response->propstat->prop->children('http://apple.com/ns/ical/'))
//		return $result;
//	}
}